#! /usr/bin/env python
'''Deployment script for node in deepi-array

'''

import logging, sys
from datetime import datetime
from pathlib import Path
import time

from deepi import load_camera
from deepi import VideoRecorder, SocketStreamer, StillCamera
from deepi import RecorderThread
from deepi import DEEPiConfig


# Config
logging.debug("Reading config file")
config = DEEPiConfig('node.conf')
logpath = Path(config.get('ALL','logpath'))
loglevel = config.get('ALL','loglevel') # TODO: get to work with config file

logpath.mkdir(parents=True, exist_ok=True)
log_file  = (logpath / datetime.utcnow().strftime('%Y%m%dT%H%M%S')).with_suffix('.txt')

logging.root.handlers = []
logging.basicConfig(format="%(asctime)s [%(levelname)s] %(message)s",
                    level=loglevel,
                    handlers=[logging.FileHandler(log_file),
                              logging.StreamHandler(sys.stdout)
                              ]
                    )




# Make sure other folders exist
for sec in ['STILLCAM', 'RECORDER']:
    save_path  = Path(config.get(sec, 'outpath'))
    logging.debug(f"Ensuring directory exists: {save_path}")
    save_path.mkdir(parents=True, exist_ok=True)


# Set up camera
logging.info('Initializing camera')
picam = load_camera(config)


logging.info("Set up socket streaming thread")
streaming_resolution = config.get('SOCKETSTREAM','resolution')
streaming_port = config.getint('SOCKETSTREAM','port')
streaming_splitter = config.getint('SOCKETSTREAM','splitter')
logging.debug(f"Streaming splitter: {streaming_splitter}")
timelapse_interval = config.getint('TIMELAPSE','interval')



# resolution = '1080p'
# framerate = 24
# video_split_period = 10*60
# port = 8000
# splitter_port = 2

# time.sleep(2) # warm up camera

logging.info("Setting up video recorder")
recorder = VideoRecorder(picam, 
                         splitter_port=config.getint('RECORDER','splitter'),
                         outpath=config.get('RECORDER','outpath'),
                         )

logging.info("Setting up still camera")
camera = StillCamera(picam, 
                     splitter_port=config.getint('STILLCAM','splitter'), 
                     outpath=config.get('STILLCAM','outpath')
                     )

logging.debug("Started socket streaming thread")
while True:
    with  SocketStreamer(8000) as output:
        logging.info("Client connected")
        picam.start_recording(output, format='mjpeg', 
                              splitter_port=streaming_splitter,
                              resize=streaming_resolution)
        start = time.time()
        recorder.start()
        camera.start_timelapse(timelapse_interval)
        try:
            while True:
                picam.wait_recording(5, splitter_port=streaming_splitter)
        except Exception as e:
            logging.debug(f"Error on wait_recording: {e}")
        finally:
            recorder.stop()
            camera.stop_timelapse()    

        finish = time.time()
        try:
            picam.stop_recording(splitter_port=streaming_splitter)
        except BrokenPipeError:
            pass
        except Exception as e:
            logging.debug(f"Error on stop_recording: {e}")
    
                        

    logging.debug("Lost connection or closed")
    logging.info(f'Sent {output._count} frames in {finish-start:.1f} seconds '\
                f'({output._count/(finish-start):.1f}fps)')
    time.sleep(1)        
logging.debug("Restarting socket streamer")
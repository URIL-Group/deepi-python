#! /usr/bin/env python
''' Deploy script for the hullcamera projects

'''


import logging, sys
from datetime import datetime
from pathlib import Path

from deepi import load_camera
# from deepi import load_config
#from deepi import make_recorder, make_socket_streamer
from deepi import VideoRecorder, SocketStreamer
from deepi import RecorderThread
from deepi import StillCamera
from deepi import DEEPiConfig
from deepi.sensors import Bar100, DataRecorder
# from deepi import SocketStreamingThread

config = DEEPiConfig('hullcam.conf')

# Config
logpath = Path("/home/pi/log/")
loglevel = logging.DEBUG
logpath.mkdir(parents=True, exist_ok=True)
log_file  = (logpath / datetime.utcnow().strftime('%Y%m%dT%H%M%S')).with_suffix('.txt')

# Set up logging
logging.root.handlers = []
logging.basicConfig(format="%(asctime)s [%(levelname)s] %(message)s",
                    level=loglevel,
                    handlers=[logging.FileHandler(log_file),
                              logging.StreamHandler(sys.stdout)
                              ]
                    )

# Make sure other folders exist
for sec in ['STILLCAM', 'RECORDER']:
    save_path  = Path(config.get(sec, 'outpath'))
    logging.debug(f"Ensuring directory exists: {save_path}")
    save_path.mkdir(parents=True, exist_ok=True)

# Set up camera
logging.info('Initializing camera')
picam = load_camera(config)

logging.info("Set up recorder thread")
recorder = VideoRecorder(picam, 
                         splitter_port=config.getint('RECORDER','splitter'),
                         outpath=config.get('RECORDER','outpath'))
# recorder_thread = RecorderThread(recorder, 
#                                  interval=config.getint('RECORDER','split'))
interval = config.getint('RECORDER','split')

# if config.getboolean('TIMELAPSE',''):
logging.info("Setting up still camera")
camera = StillCamera(picam, splitter_port=config.getint('STILLCAM','splitter'),
                     outpath=config.get('STILLCAM','outpath'),
                     fmt=config.get('STILLCAM','format'))


logging.info("Setting up data recorder")
sec = 'SENSORS'
outdir = Path(config.get(sec, 'outpath'))

if config.getboolean(sec, 'bar100'):
    try:
        logging.info("Setting up pressure sensor")
        sensor = Bar100()
        sampling_rate_Hz = config.getfloat(sec,'sampling_rate_Hz')
        data_recorder = DataRecorder([sensor], outdir, sampling_rate_Hz)
        logging.info("Starting data recorder")
        data_recorder.start()
        pressure_sensor_working = True
    except OSError:
        logging.warning("Bar100 Sensor failed to initialized, skipping.")
else:
    logging.info("Pressure sensor enabled in config file")
    pressure_sensor_working = False

# if config.getboolean('RECORDER','autostart'):
#     logging.info("Starting recording")
#     recorder_thread.start()

if config.getboolean('TIMELAPSE','autostart'):
    logging.info("Starting timelapse")
    camera.start_timelapse(interval=config.getint('TIMELAPSE','interval'))

# logging.info("Set up socket streaming thread")
# socket_streaming_thread = SocketStreamingThread(picam, port=8000, splitter_port=2)

logging.info(f"Start recording {interval}")
recorder.start()
recorder.wait(interval)
recorder.stop()
camera.stop_timelapse()
logging.info("Recording and timelapse stopped")
if pressure_sensor_working:
    data_recorder.stop()
    logging.info("Data recorder stopped")
logging.info("Shutting off")
import os
os.system("sudo shutdown now -h")



logging.info("All set, it should be a never ending loop now.")
